@startuml

title GFX

package "Adafruit" {

    class "GFXglyph" as gfxGlyph
    class "GFXfont" as gfxFont

    gfxGlyph <--* gfxFont
}

note top of Adafruit
    Only a copy from the Adafruit-GFX-Library to
    be able to use the font files without change.
    https://github.com/adafruit/Adafruit-GFX-Library/blob/master/gfxfont.h
end note

class "BaseGfx<TColor>" as baseGfx {
    - m_width : uint16_t
    - m_height : uint16_t
    - m_font : const GFXfont*
    + BaseGfx(width : uint16_t, height : uint16_t)
    + {abstract} getColor(x : int16_t, y : int16_t) = 0 : TColor
    + {abstract} drawPixel(x : int16_t, y : int16_t, color : const TColor&) = 0 : void
    + {abstract} dimPixel(x : int16_t, y : int16_t, ratio : uint8_t) = 0 : void
    + drawVLine(x : int16_t, y : int16_t, width : uint16_t) : void
    + drawHLine(x : int16_t, y : int16_t, height : uint16_t) : void
    + drawLine(xs : int16_t, ys : int16_t, xe : int16_t, ye : int16_t, color : const TColor&) : void
    + drawRectangle(x : int16_t, y : int16_t, width : uint16_t, height : uint16_t, color : const TColor&) : void
    + fillRect(x : int16_t, y : int16_t, width : uint16_t, height : uint16_t, color : const TColor&) : void
    + fillScreen(color : const TColor&) : void
    + drawRGBBitmap(x : int16_t, y : int16_t, bitmap : const TColor*, width : uint16_t, height : uint16_t) : void
}

note left of baseGfx
    Basic graphics operations,
    independend of the color type.
end note

class "BaseFont<TColor>" as baseFont {
    - m_gfxFont : const GFXfont*
    + getGfxFont() : const GFXfont*
    + setGfxFont(gfxFont : const GFXfont*) : void
    + getHeigth() : uint16_t
    + getCharBoundingBox(singleChar : char, width : uint16_t&, height : uint16_t) const : bool
    + drawChar(gfx : BaseGfx<TColor>&, cursorX : int16_t&, cursorY : int16_t&, singleChar : char, color : const TColor&) : void
}

class "BaseText<TColor>" as baseText {
    - m_cursorX : int16_t
    - m_cursorY : int16_t
    - m_textColor : TColor
    - m_isTextWrapEnabled : bool
    - m_font : BaseFont<TColor>
    + getTextCursorPos(x : int16_t&, y : int16_t&) const : void
    + getTextCursorPosX() const : int16_t
    + getTextCursorPosY() const : int16_t
    + setTextCursorPos(x : int16_t, y : int16_t) : void
    + getTextColor() const : TColor
    + setTextColor(color : const TColor&) const : void
    + isTextWrapEnabled() const : bool
    + setTextWrap(isEnabled : bool) : void
    + getFont() const : BaseFont<TColor>&
    + setFont(font : BaseFont<TColor>&) : void
    + getTextBoundingBox(width : uint16_t, height : uint16_t, text : const char*, boxWidth : uint16_t&, boxHeight : uint16_t&) : bool
    + drawChar(gfx : BaseGfx<TColor>&, singleChar : char) : void
    + drawText(gfx : BaseGfx<TColor>&, text : const char*) : void
}

gfxFont <-- baseFont
baseFont <-- baseText

baseFont ..> baseGfx: <<use>>
baseText ...> baseGfx: <<use>>

class "BaseGfxPen<TColor>" as baseGfxPen {
    - m_x : int16_t
    - m_y : int16_t
    - m_color : TColor
    - m_gfx : BaseGfx&
    + BaseGfxPen(gfx : BaseGfx&)
    + moveTo(x : int16_t, y : int16_t) : void
    + lineTo(x : int16_t, y : int16_t) : void
    + plot(x : int16_t, y : int16_t) : void
    + getColor() const : TColor
    + setColor(color : const TColor&) : void
}

note right of baseGfxPen
    Basic drawing pen operations,
    independend of the color type.
    Every drawing action starts from
    the current pen position and moves
    the pen.
end note

baseGfx <- baseGfxPen: <<draw>>

class YAGfx <<typedef>>
hide YAGfx members

note left of YAGfx
    Graphic operations, defined with
    color type according to display type.
end note

baseGfx <|-- YAGfx: <<bind>>\nTColor -> Color

class YAGfxPen <<typedef>>
hide YAGfxPen members

note bottom of YAGfxPen
    Drawing pen operations, defined with
    color type according to display type.
end note

baseGfxPen <|-- YAGfxPen: <<bind>>\nTColor -> Color

class "IDisplay" as iDisplay {
    + {abstract} begin() = 0 : bool
    + {abstract} show() = 0 : void
    + {abstract} isReady() = 0 : bool
    + {abstract} setBrightness(brightness : uint8_t) = 0 : void
    + {abstract} clear() = 0 : void
}

note left of iDisplay
    The interface for physical display adapters.
end note

YAGfx <|-- iDisplay

package "HAL" {

    class "Board" as board

    package "3rdPartyLibs" as 3rdPartyLibs {
    }

    class "Display" as display {
        + begin() : bool
        + show() : void
        + isReady() : bool
        + setBrightness(brightness : uint8_t) : void
        + clear() : void
        + getColor(x : int16_t, y : int16_t) : Color
        - drawPixel(x : int16_t, y : int16_t, color : const Color&) : void
        - dimPixel(x : int16_t, y : int16_t, ratio : uint8_t) : void
        - write(singleChar : uint8_t) : size_t
    }

    note left of display
        Represents the physical display and
        provides the GFX interface to draw inside.
    end note

    iDisplay <|.... display: <<realize>>
    3rdPartyLibs <-- display
    board <.. display: <<use>>
}

class "DisplayMgr" as displayMgr

note right of displayMgr
    Manages the display slots, which are shown in
    round robin order. In a slot a plugin can be
    installed, which shows informations on the display.

    Note: **The used display is decided at compile time.**
    **That means concrete, the module specific HAL is choosen**
    **at compile time by platformio environment.**
end note

display <.. displayMgr: <<use>>

@enduml