@startuml

title Plugin Service

interface "Plugin" as plugin {

    + m_isEnabled : bool
    + m_slotId : uint8_t
    + getSlotId(): uint8_t
    + setSlotId(slotId : uint8_t) : void
    + {abstract} registerWebInterface(srv : AsyncWebServer&) : void
    + {abstract} unregisterWebInterface(srv : AsyncWebServer&) : void
    + {abstract} getName() = 0 : const char*
    + {abstract} getDuration() : uint32_t
    + enable() : void
    + disable() : void
    + isEnabled() : bool
    + {abstract} start() : void
    + {abstract} stop() : void
    + {abstract} update(gfx: Adafruit_Gfx&) = 0 : void
}

note right of plugin
    Plugins which are installed and enabled are scheduled.
end note

class "PluginMgr" as pluginMgr
class "DisplayMgr" as displayMgr
class "MyWebserver" as myWebserver
class "App" as app
class "ConcretePlugin" as concretePlugin
class "Settings" as settings

app ..> pluginMgr: Install/Uninstall plugin

note right of app
    The application installs or uninstall plugins via
    the plugin manager.
    
    This can be requested by the user via REST API or
    web page.

    Some plugins may be necessary for internal use and
    therefore installed during startup.
end note

plugin <|.. concretePlugin: <<realize>>

note right of concretePlugin
    Each plugin represents its own
    functionality. If a plugin is scheduled
    by the display manager, it can draw on the
    display.
end note

displayMgr ..> plugin: Start/Stop/Update plugin

note right of displayMgr
    The display manager provides slots for the plugins,
    where they can be plugged in.

    The application can request to immediate activate
    a specific slot and its plugged in plugin.

    Or request to rotate from slot to slot.
end note

pluginMgr ..> displayMgr: Install/Uninstall\nplugin
pluginMgr o--> "0..*" plugin: Register/Unregister\nweb pages
pluginMgr .u.> myWebserver: Register/Unregister\nplugin web pages
pluginMgr .u.> settings: Load/Save\nplugin configuration

note left of pluginMgr
    The plugin manager creates and installs a plugin in a display
    slot and register its web pages.
    
    Or uninstalls and destroys a plugin and remove its registered
    web pages.
    
    It saves the configuration of which plugin is in which slot
    in persistent memory.
    
    It loads the configuration at startup.
end note

@enduml